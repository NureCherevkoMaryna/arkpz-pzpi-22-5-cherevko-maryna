МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ 
РАДІОЕЛЕКТРОНІКИ




ЗВІТ
з лабораторної роботи №2
з дисципліни
«Аналіз та рефакторинг коду»






 
Виконала
ст. гр. ПЗПІ-22-5
Черевко Марина Романівна
Перевірив:
Дашенков Д. С.
 








Харків 2024
2	РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)


2.1.	Мета роботи
Розробити базу даних для серверної частини програмної системи та прикладного програмного інтерфейсу.

2.2.	Порядок виконання роботи
2.2.1. Будова програмної системи

 






2.2.2. UML діаграма прецедентів для серверної частини системи 

 

2.2.3. ER діаграма бази даних

 
2.2.4. Розробка бази даних програмної системи
2.2.4.1. Скрипт створення бази даних та таблиць

 
 

2.2.4.2. Список сутностей
Users (Користувачі)
Таблиця зберігає інформацію про користувачів системи. Користувачі можуть мати доступ до сенсорів, переглядати дані та налаштовувати сповіщення.
Поля:
‒ user_id: унікальний ідентифікатор користувача;
‒ username: логін користувача;
‒ password_hash: хешований пароль для забезпечення безпеки;
‒ email: унікальна електронна адреса користувача.

Sensors (Датчики)
Таблиця містить інформацію про всі підключені IoT-пристрої, які зчитують температуру та вологість.


Поля:
‒ sensor_id: унікальний ідентифікатор сенсора;
‒ label: назва або код сенсора;
‒ device_type: тип пристрою (наприклад, температурний чи вологості);
‒ temperature: поточна температура, зчитана сенсором;
‒ humidity: поточна вологість, зчитана сенсором.

SensorData (Дані сенсорів)
Таблиця зберігає історичні дані, отримані від сенсорів. Це дозволяє аналізувати умови зберігання з плином часу.
Поля:
‒ data_id: унікальний ідентифікатор запису даних;
‒ sensor_id: ідентифікатор сенсора, який надіслав дані;
‒ record_time: час запису показників;
‒ temperature: температура, зчитана сенсором на момент запису;
‒ humidity: вологість, зчитана сенсором на момент запису;

UserSensor (Користувачі та сенсори)
Таблиця забезпечує зв’язок «багато до багатьох» між користувачами та сенсорами. Один користувач може мати доступ до кількох сенсорів, і один сенсор може бути пов’язаний з кількома користувачами.
Поля:
‒ user_id: ідентифікатор користувача;
‒ sensor_id: ідентифікатор сенсора.

NotificationSettings (Налаштування сповіщень)
Таблиця містить порогові значення температури та вологості, які користувачі можуть налаштовувати для кожного сенсора. Якщо показники перевищують ці значення, система генерує сповіщення.

Поля:
‒ notification_id: унікальний ідентифікатор налаштувань сповіщення;
‒ temperature_min: мінімально допустима температура;
‒ temperature_max: максимально допустима температура;
‒ humidity_min: мінімально допустима вологість;
‒ humidity_max: максимально допустима вологість;
‒ sensor_id: ідентифікатор сенсора, для якого застосовуються ці налаштування.

Alerts (Сповіщення)
Таблиця зберігає записи про критичні ситуації, коли умови зберігання виходять за допустимі межі.
Поля:
‒ alert_id: унікальний ідентифікатор сповіщення;
‒ triggered_at: час, коли було зафіксовано проблему;
‒ alert_type: тип сповіщення (наприклад, перевищення температури);
‒ alert_message: опис проблеми та рекомендація для її вирішення;
‒ user_id: ідентифікатор користувача, який отримав сповіщення;
‒ notification_id: ідентифікатор налаштувань, які були порушені.

Роль сутностей в системі:
‒ Users забезпечують доступ до системи;
‒ Sensors реєструють параметри умов зберігання;
‒ SensorData дозволяють аналізувати історичні дані;
‒ UserSensor визначають, які сенсори доступні певним користувачам;
‒ NotificationSettings налаштовують порогові значення умов зберігання;
‒ Alerts фіксують проблеми та сповіщають користувача про них.

Ця структура забезпечує всі необхідні зв’язки для роботи системи.

2.2.5. Діаграма структури БД

 

2.2.6. Розробка API
За налаштування серверу відповідають наступні файли:
‒ .env: параметри підключення до бази даних
 

‒ server.js: налаштування порту підключення до БД
 
‒ app.js: запуск сервера та налаштування маршрутів
 

2.2.7. Створення специфікації розробленого API
Стандартом для документування REST API було обрано Swagger. Для опису специфікації необхідно створити файл swagger.yaml:
 
 




2.2.8. Створення програмної реалізації API та функцій роботи з БД
2.2.8.1. Отримати всіх користувачів
 

2.2.8.2. Отримати певного користувача за ідентифікатором
 

2.2.8.3. Додати нового користувача
 



2.2.8.4. Оновити дані користувача
 

2.2.8.5. Видалити користувача за ідентифікатором
 

2.2.8.6. Отримати всі датчики
 

2.2.8.7. Отримати інформацію про датчик за ідентифікатором
 

2.2.8.8. Додати новий датчик
 

2.2.8.9. Оновити параметри датчику
 

2.2.8.10. Отримати всі налаштування повідомлень
 

2.2.8.11. Отримати налаштування повідомлення по ідентифікатору
 

2.2.8.12. Додати нові налаштування повідомлень
 

2.2.8.13. Отримати всі сповіщення
 

2.2.8.14. Отримати всі сповіщення певного користувача
 

2.2.8.15. Отримати сповіщення за ідентифікатором
 

2.2.8.16. Додати нове сповіщення
 

2.2.8.17. Отримати всі данні датчиків
 

2.2.8.18. Отримати всі данні певного датчика
 

2.2.8.19. Отримати певні дані за ідентифікатором
 

2.2.9. Перевірка роботи програмного коду серверної частини системи
 
 

 

 
