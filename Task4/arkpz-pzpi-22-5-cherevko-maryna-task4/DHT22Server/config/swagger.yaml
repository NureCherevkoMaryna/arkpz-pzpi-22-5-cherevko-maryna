openapi: 3.0.0
info:
  title: DHT22 API
  version: 1.0.0
paths:
  /api/users/getAllUsers:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users with their IDs, usernames, and emails.
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
        '500':
          description: Server error
  /api/users/getUserById/{userid}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a user's details by their ID.
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
        '404':
          description: User not found
        '500':
          description: Server error
  /api/users/addUser:
    post:
      tags:
        - Users
      summary: Add a new user
      description: Create a new user by providing username, password, and email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - email
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
        '400':
          description: Missing required fields
        '500':
          description: Server error
  /api/users/updateUser/{userid}:
    put:
      tags:
        - Users
      summary: Update a user by ID
      description: Update a user's details (username, password, or email) by their ID.
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
        '404':
          description: User not found
        '500':
          description: Server error
  /api/users/delUserById/{userid}:
    delete:
      tags:
        - Users
      summary: Delete a user by ID
      description: Delete a user by their ID.
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
        '500':
          description: Server error
  /api/alerts/getAllAlerts:
    get:
      tags:
        - Alerts
      summary: Get all alerts
      description: Retrieve a list of all alerts.
      responses:
        '200':
          description: A list of alerts.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    alert_id:
                      type: integer
                      example: 1
                    alert_message:
                      type: string
                      example: "Temperature exceeds threshold"
                    resolved:
                      type: boolean
                      example: false
        '500':
          description: Internal server error.

  /api/alerts/getAlertsByUserId/{userid}:
    get:
      tags:
        - Alerts
      summary: Get alerts by user ID
      description: Retrieve all alerts for a specific user.
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user.
          schema:
            type: integer
      responses:
        '200':
          description: A list of alerts for the specified user.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    alert_id:
                      type: integer
                      example: 1
                    alert_message:
                      type: string
                      example: "Sensor data alert"
                    resolved:
                      type: boolean
                      example: false
        '404':
          description: User not found.
        '500':
          description: Internal server error.

  /api/alerts/getAlertById/{alertid}:
    get:
      tags:
        - Alerts
      summary: Get alert by ID
      description: Retrieve a specific alert by its ID.
      parameters:
        - name: alertid
          in: path
          required: true
          description: ID of the alert.
          schema:
            type: integer
      responses:
        '200':
          description: The requested alert.
          content:
            application/json:
              schema:
                type: object
                properties:
                  alert_id:
                    type: integer
                    example: 1
                  alert_message:
                    type: string
                    example: "Temperature exceeds threshold"
                  resolved:
                    type: boolean
                    example: false
        '404':
          description: Alert not found.
        '500':
          description: Internal server error.

  /api/alerts/addAlert:
    post:
      tags:
        - Alerts
      summary: Add a new alert
      description: Create a new alert with the provided data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - alert_type
                - message
                - notification_id
              properties:
                alert_type:
                  type: string
                  example: "Temperature Alert"
                message:
                  type: string
                  example: "The sensor temperature exceeds 75°C"
                user_id:
                  type: integer
                  example: 1
                notification_id:
                  type: integer
                  example: 2
      responses:
        '201':
          description: Alert created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Notification created successfully"
                  notification:
                    type: object
                    properties:
                      alert_id:
                        type: integer
                        example: 1
                      alert_message:
                        type: string
                        example: "The sensor temperature exceeds 75°C"
                      resolved:
                        type: boolean
                        example: false
        '400':
          description: Bad request. Missing required fields or invalid notification ID.
        '500':
          description: Internal server error.

  /api/notifications/getAllNotifications:
    get:
      tags:
        - Notifications
      summary: Get all notification settings
      description: Retrieve a list of all notification settings.
      responses:
        '200':
          description: A list of all notification settings.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    notification_id:
                      type: integer
                      example: 1
                    temperature_min:
                      type: number
                      format: float
                      example: 18.5
                    temperature_max:
                      type: number
                      format: float
                      example: 30.0
                    humidity_min:
                      type: number
                      format: float
                      example: 40.0
                    humidity_max:
                      type: number
                      format: float
                      example: 60.0
                    sensor_id:
                      type: integer
                      example: 5
        '500':
          description: Internal server error.

  /api/notifications/getNotificationById/{notificationid}:
    get:
      tags:
        - Notifications
      summary: Get notification settings by ID
      description: Retrieve specific notification settings by its ID.
      parameters:
        - name: notificationid
          in: path
          required: true
          description: ID of the notification settings.
          schema:
            type: integer
      responses:
        '200':
          description: The requested notification settings.
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification_id:
                    type: integer
                    example: 1
                  temperature_min:
                    type: number
                    format: float
                    example: 18.5
                  temperature_max:
                    type: number
                    format: float
                    example: 30.0
                  humidity_min:
                    type: number
                    format: float
                    example: 40.0
                  humidity_max:
                    type: number
                    format: float
                    example: 60.0
                  sensor_id:
                    type: integer
                    example: 5
        '404':
          description: Notification settings not found.
        '500':
          description: Internal server error.

  /api/notifications/addNotificationSettings:
    post:
      tags:
        - Notifications
      summary: Add new notification settings
      description: Create new notification settings with the provided data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sensor_id
              properties:
                temperature_min:
                  type: number
                  format: float
                  example: 18.5
                temperature_max:
                  type: number
                  format: float
                  example: 30.0
                humidity_min:
                  type: number
                  format: float
                  example: 40.0
                humidity_max:
                  type: number
                  format: float
                  example: 60.0
                sensor_id:
                  type: integer
                  example: 5
      responses:
        '201':
          description: Notification settings created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Notification created successfully"
                  notification:
                    type: object
                    properties:
                      notification_id:
                        type: integer
                        example: 1
                      temperature_min:
                        type: number
                        format: float
                        example: 18.5
                      temperature_max:
                        type: number
                        format: float
                        example: 30.0
                      humidity_min:
                        type: number
                        format: float
                        example: 40.0
                      humidity_max:
                        type: number
                        format: float
                        example: 60.0
                      sensor_id:
                        type: integer
                        example: 5
        '400':
          description: Bad request. Missing required fields or sensor not found.
        '500':
          description: Internal server error.

  /api/sensors/getAllSensors:
    get:
      tags:
        - Sensors
      summary: Get all sensors
      description: Retrieve a list of all sensors.
      responses:
        '200':
          description: A list of sensors.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    sensor_id:
                      type: integer
                      example: 1
                    label:
                      type: string
                      example: "Temperature Sensor"
                    device_type:
                      type: string
                      example: "DHT22"
        '500':
          description: Internal server error.

  /api/sensors/getSensorById/{sensorid}:
    get:
      tags:
        - Sensors
      summary: Get sensor by ID
      description: Retrieve details of a specific sensor by its ID.
      parameters:
        - name: sensorid
          in: path
          required: true
          description: ID of the sensor.
          schema:
            type: integer
      responses:
        '200':
          description: Details of the sensor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sensor_id:
                    type: integer
                    example: 1
                  label:
                    type: string
                    example: "Temperature Sensor"
                  device_type:
                    type: string
                    example: "DHT22"
        '404':
          description: Sensor not found.
        '500':
          description: Internal server error.

  /api/sensors/addSensor:
    post:
      tags:
        - Sensors
      summary: Add a new sensor
      description: Create a new sensor by providing its label and device type.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - label
                - device_type
              properties:
                label:
                  type: string
                  example: "Temperature Sensor"
                device_type:
                  type: string
                  example: "DHT22"
      responses:
        '201':
          description: Sensor created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sensor created successfully"
                  sensor:
                    type: object
                    properties:
                      sensor_id:
                        type: integer
                        example: 1
                      label:
                        type: string
                        example: "Temperature Sensor"
                      device_type:
                        type: string
                        example: "DHT22"
        '400':
          description: Missing required fields.
        '500':
          description: Internal server error.

  /api/sensors/updateSensorParameters/{sensorid}:
    put:
      tags:
        - Sensors
      summary: Update sensor parameters
      description: Update the label or device type of a specific sensor.
      parameters:
        - name: sensorid
          in: path
          required: true
          description: ID of the sensor to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  type: string
                  example: "Updated Sensor Label"
                device_type:
                  type: string
                  example: "Updated Device Type"
      responses:
        '200':
          description: Sensor updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sensor updated successfully"
                  sensor:
                    type: object
        '404':
          description: Sensor not found.
        '400':
          description: Missing or invalid fields.
        '500':
          description: Internal server error.

  /api/sensordata/getSensorDataById/{dataid}:
    get:
      tags:
        - SensorData
      summary: Get sensor data by data ID
      description: Retrieve a specific sensor data record by its ID.
      parameters:
        - name: dataid
          in: path
          required: true
          description: ID of the sensor data record.
          schema:
            type: integer
      responses:
        '200':
          description: Sensor data details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data_id:
                    type: integer
                    example: 1
                  sensor_id:
                    type: integer
                    example: 10
                  record_time:
                    type: string
                    format: date-time
                    example: "2025-01-01T12:00:00Z"
                  temperature:
                    type: number
                    format: float
                    example: 23.5
                  humidity:
                    type: number
                    format: float
                    example: 55.0
        '404':
          description: Sensor data not found.
        '500':
          description: Internal server error.

  /api/sensordata/getSensorDataBySensorId/{sensorid}:
    get:
      tags:
        - SensorData
      summary: Get sensor data by sensor ID
      description: Retrieve all sensor data records for a specific sensor by its ID.
      parameters:
        - name: sensorid
          in: path
          required: true
          description: ID of the sensor.
          schema:
            type: integer
      responses:
        '200':
          description: List of sensor data for the specified sensor.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    data_id:
                      type: integer
                      example: 1
                    sensor_id:
                      type: integer
                      example: 10
                    record_time:
                      type: string
                      format: date-time
                      example: "2025-01-01T12:00:00Z"
                    temperature:
                      type: number
                      format: float
                      example: 23.5
                    humidity:
                      type: number
                      format: float
                      example: 55.0
        '404':
          description: Sensor not found or no data available.
        '500':
          description: Internal server error.
